# PUnit #######################################################################
# PUnit, a portable unit testing framework for C.
# Inspired by: http://www.jera.com/techinfo/jtns/jtn002.html
#
# Copyright (c) 2012, Ninjaware Oy, Olli Vanhoja <olli.vanhoja@ninjaware.fi>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# MUTs
SRC = $(foreach d,$(dir $(SRCDIR)),$(wildcard $(d)*.c))

# Tests
TEST_SRC = $(wildcard *.c)

IDIR += ../punit
IDIR := $(patsubst %,-I%,$(subst :, ,$(IDIR)))

ODIR = obj
BDIR = bin

CC = gcc
CCFLAGS += -Wall -pedantic -MMD -DMU_TEST_BUILD

OBJ = $(patsubst %,./$(ODIR)/%,$(notdir $(SRC:.c=.o)))
TEST_EXECUTABLES = $(TEST_SRC:%.c=$(BDIR)/%)

space = $(empty) $(empty)

# There is a test for following modules
TEST_MODS = $(filter-out test,$(subst _,$(space),$(basename $(notdir $(TEST_SRC)))))

# All source modules
SRC_MODULES = $(filter $(TEST_MODS),$(basename $(notdir $(SRC))))

# Source files of modules that are actually testable
SRC := $(filter $(foreach file,$(TEST_MODS), %/$(file).c), $(SRC))

#### Targets ####
all: punit $(OBJ) $(TEST_EXECUTABLES) run
	@echo "'make all' done"

punit: ../punit/punit.c
	@echo "Build unit test framework"
	@echo "=================================================================="
	$(CC) $(IDIR) $(CCFLAGS) -c $^ -o ./$(ODIR)/punit.o
	@echo "=================================================================="

# MUTs
$(OBJ): $(SRC)
	@echo "Build MUT: $@"
	@echo "=================================================================="
	$(CC) $(IDIR) $(CCFLAGS) -c $< -o $@
	@echo "=================================================================="

# Tests
bin/%: %.c ./$(ODIR)/punit.o
	@echo "Build test: $@"
	@echo "=================================================================="
	$(eval TESTS := $(filter-out test,$(subst _,$(space),$(basename $(notdir $@)))))
	$(eval DEPS := $(foreach file,$(addsuffix .o, $(filter $(TESTS), $(SRC_MODULES))),./$(ODIR)/$(file)))
	$(CC) $(CCFLAGS) $(IDIR) $^ $(DEPS) -o ./$@
	@echo "=================================================================="

# Run tests
run: $(TEST_EXECUTABLES)
	@echo "Run all tests"
	@echo "=================================================================="
	@$(foreach exe,$^,echo "$(exe):"; $(exe); )

.PHONY: clean

clean:
	rm -f ./$(ODIR)/*.o ./$(TEST_EXECUTABLES)
